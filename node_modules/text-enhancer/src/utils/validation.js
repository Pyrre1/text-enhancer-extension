import { ValidationError } from "./errors.js"

// Fallback values if validation fails.
const STEP_FALLBACK = 2
const MIN_SIZE_FALLBACK = 6
const MAX_SIZE_FALLBACK = 40
/** Matches numeric values with optional decimal and unit (e.g. "16px", "1.2em", "100%")
 */
const SIZE_REGEX = /^(\d+(\.\d+)?)([a-z%]+)?$/


// Simple assertion function to throw errors with messages.
export function assert(condition, message) {
  if (!condition) {
    throw new ValidationError(message || 'Assertion failed')
  }
}

export function validateSelectorArray(selectors) {
  assert(Array.isArray(selectors), 'Selectors should be an array')
  selectors.forEach(selector => {
    assert(typeof selector === 'string', 'Each selector should be a string')
    assert(selector.trim().length > 0, 'Selectors should not be empty strings')
  })
}

export function validateStepFormat(step) {
  const isValid = typeof step === 'number' || 
  (typeof step === 'string' && SIZE_REGEX.test(step.replace(',', '.'))
  )
  assert(isValid, `Invalid step format: "${step}"`)
}

export function validateMinSize(minSize) {
  const isValid = typeof minSize === 'number' || 
  (typeof minSize === 'string' && SIZE_REGEX.test(minSize.replace(',', '.'))
  )
  assert(isValid, `Invalid minSize format: "${minSize}"`)
}

export function validateMaxSize(maxSize) {
  const isValid = typeof maxSize === 'number' || 
  (typeof maxSize === 'string' && SIZE_REGEX.test(maxSize.replace(',', '.'))
  )
  assert(isValid, `Invalid maxSize format: "${maxSize}"`)
}

export function validateConfig(config) {
  assert(typeof config === 'object' && config !== null, 'Config should be an object')
  validateSelectorArray(config.selectors || ['p'])
  validateStepFormat(config.step || STEP_FALLBACK)
  validateMinSize(config.minSize || MIN_SIZE_FALLBACK)
  validateMaxSize(config.maxSize || MAX_SIZE_FALLBACK)
}

