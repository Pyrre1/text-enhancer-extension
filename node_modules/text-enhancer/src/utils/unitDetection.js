/**
 * Normalizes the step value by replacing commas with decimal points.
 * returns the step as a normalizedstring or number.
 */
export function normalizeStep(step) {
  return typeof step === 'string' ? step.replace(',', '.') : step
}

/**
 * Detects the unit from a size value, return the unit or '_no_unit_'.
 */
export function detectUnit(value) {
  if (typeof value === 'number') {
    return '_no_unit_'
  }
  const match = value.match(/^(\d+(\.\d+)?)([a-z%]+)$/)
  return match ? match[3] : '_no_unit_'
}

/** Detects the dominant unit among a set of element states.
 * If multiple units are found, returns 'noDominantUnit'.
 */
export function detectDominantUnit(elementStates) {
  const units = new Set()
  elementStates.forEach(state => {
    const match = getComputedStyle(state.element).fontSize.match(/^([\d.]+)([a-z%]+)$/)
    if (match) {
      units.add(match[2])
    }
  })
  return units.size === 1 ? [...units][0] : 'noDominantUnit'
}

// Extracts all unique units from a set of element states.
export function detectUnitsFromElements(elementStates) {
  const units = new Set()
  elementStates.forEach(state => {
    const match = getComputedStyle(state.element).fontSize.match(/^([\d.]+)([a-z%]+)$/)
    if (match) {
      units.add(match[2])
    }
  })
  return units
}